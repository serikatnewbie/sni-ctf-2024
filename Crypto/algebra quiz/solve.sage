from Crypto.Util.number import bytes_to_long as b2l, long_to_bytes as l2b

n = 148159073475490554976830150327155392253383421884637888518976075218991840259909292977696567946188526905881021308091412992506400607055309600779123094263597803876312553610587719274801284127968584110332657004215154048322546055679892755546650615503443935212960907541724839939760848547769736706057810074532158815621
e = 65537
ct = 136895042113008062252947851723319517690657557864374157675334156354551259121805701462856446368532787179526259513110365719193516510150653363286044968711089274647209920050434501851333985381306629513121130845762365695895538555744379614182832181173444550127999433545388547474980605158385322099708758597178822637686
lk = 8591055383032407124800010376113446484818699254423455820028012488624370677179824583973012319600932469994997996680567918306724134292536658058880330069613441417222079816304599968920067257952781824249167247085117357600406314203025527146089305295107621363345771985516139613532724982284809831082985751738479611929102742923176101487530563877871906970764131319767833966676376157172295250800666073344598250743370180713792475800082948734301439673152384544746834850042663387627704109

shift = 32
bl = lk.bit_length() - shift
ub = 2**bl-1

for i in reversed(range(bl)):
    b1 = lk >> (i + shift)
    b2 = lk >> i
    if (b1 ^^ b2) & 1:
        lk = lk | (1 << i)
    else:
        lk = lk & ~int(1 << i)

lk = lk >> shift

lt = ((lk >> (bl // 4)) & ub) | ((lk << (3 * bl // 4)) & ub)

P.<x> = PolynomialRing(QQ)
f = x^17
g = (x+b2l(b'SNI'))^3
h = f % g + g

kp = lt - h.coefficients()[0]

p = gcd(kp, n)
q = n // p

assert p * q == n

d = pow(e, -1, (p-1)*(q-1))
m = pow(ct, d, n)

print(l2b(m))
